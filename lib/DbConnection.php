<?phpnamespace MVCandNamespaces\lib;/*	DbConnection.php	|> Create a database connection and ensure it is unique	|	- Uniqueness is guaranteed by Singleton Design Pattern	|	- Late Static Bindings are required to comprehend (http://www.php.net/manual/en/language.oop5.late-static-bindings.php)*/use PDO;class DbConnection{	protected $_bdd; //Connection pointer 	static protected $_instance; //Connection instance pointere		// 1->Constructor inaccessible outside this class	private function __construct()	{		// May include some config here				// Let's connect to the database !		try		{			$this->_bdd = new PDO(									"mysql:host=localhost;dbname=MVCandNamespaces;charset=utf8",									"root",									""									);		} catch(PDOException $e) {			echo $e;		}	}		// 2->Class Instantiation within the current class	static public function getInstance()	{		// If there is no connection instance <=> If $_instance is not set(null)		if( true === is_null(static::$_instance) )		{			static::$_instance = new static(); // Then we instantiate a connection calling the constructor		}				return static::$_instance; // Return a new or an previously existing connection instance!	}		public function __call($method, array $arg) 	{		// We delegate unknown Methods calls to PDO object $this->_db		var_dump($this->_bdd);		return call_user_func_array(array($this->_bdd, $method), $arg);	}		// To ensure uniqueness, we prevent Cloning an instance of the database connection by make it private.	private function __clone()	{	}}